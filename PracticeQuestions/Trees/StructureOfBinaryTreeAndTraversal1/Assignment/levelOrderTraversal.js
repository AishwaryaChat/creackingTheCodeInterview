/*
Level Order

Problem Description
Given a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).



Problem Constraints
1 <= number of nodes <= 105



Input Format
First and only argument is root node of the binary tree, A.



Output Format
Return a 2D integer array denoting the zigzag level order traversal of the given binary tree.



Example Input
Input 1:

    3
   / \
  9  20
    /  \
   15   7
Input 2:

   1
  / \
 6   2
    /
   3


Example Output
Output 1:

 [
   [3],
   [9, 20],
   [15, 7]
 ]
Output 2:

 [ 
   [1]
   [6, 2]
   [3]
 ]


Example Explanation
Explanation 1:

 Return the 2D array. Each row denotes the traversal of each level.
*/

// We will use a queue here, we will keep pushing the elements in the queue in every iteration
// Dequeue the element in every iteration, and push it's child to the queue
// The Idea is to keep the track of last element of each level
// As soon as we deque the last element we have to change the last element to new last
// we are also keeping track of the last previous element which either have left or right child

// TC = O(N)

const Queue = require("../Queues/arrayImpelemtation");

class TreeNode {
  constructor(data, left = null, right = null) {
    this.data = data;
    this.left = left;
    this.right = right;
  }
}

function solve(root) {
  let queue = new Queue({});
  queue.enqueue(root);
  let ans = [];
  let last = root;
  let ans1 = [];
  let prev = root
  while (!queue.isEmpty()) {
    
    let ele = queue.dequeue();
    if(ele.left || ele.right) {
        prev = ele
    }
    ans1.push(ele.data);
    if (last.data == ele.data) {
      if (ele.right) {
        last = ele.right;
      } else if (ele.left) {
        last = ele.left;
      } else {
          last = prev.right || prev.left
      }
      ans.push(ans1);
      ans1 = [];
    }
    if (ele.left) {
      queue.enqueue(ele.left);
    }
    if (ele.right) {
      queue.enqueue(ele.right);
    }
  }
  return ans;
}

// const N1RightLeft = new TreeNode(3);
// const N1Right = new TreeNode(2, N1RightLeft);
// const N1Left = new TreeNode(6);
// const N1 = new TreeNode(1, N1Left, N1Right);

// console.log(solve(N1));

const N18 = new TreeNode(18)
const N17 = new TreeNode(17)
const N16 = new TreeNode(16, N17, N18);
const N15 = new TreeNode(15);
const N14 = new TreeNode(14, N16);
const N13 = new TreeNode(13);
const N12 = new TreeNode(12);
const N11 = new TreeNode(11);
const N10 = new TreeNode(10);
const N9 = new TreeNode(9);
const N8 = new TreeNode(8);
const N7 = new TreeNode(7, N14, N15);
const N6 = new TreeNode(6, N12, N13);
const N5 = new TreeNode(5, N10, N11);
const N4 = new TreeNode(4, N8, N9);
const N3 = new TreeNode(3, N6, N7);
const N2 = new TreeNode(2, N4, N5);
const N1 = new TreeNode(1, N2, N3);

console.log(solve(N1));

// [346 ] [162 59 ] [148 18 323 131 ] [174 72 30 337 322 86 351 45 ] [287 340 238 25 242 185 69 302 117 330 222 22 41 371 97 177 ] [247 273 369 184 114 254 349 147 38 167 326 43 112 125 211 282 256 79 329 35 156 239 23 127 19 ] [350 197 53 219 175 347 60 355 140 11 40 333 98 318 21 266 193 159 298 93 280 244 183 207 15 231 14 295 245 272 292 94 374 363 95 319 24 ] [225 220 202 379 7 143 342 258 74 87 123 61 343 136 137 364 89 315 235 217 226 268 224 382 133 293 129 216 109 360 78 157 108 142 96 105 356 368 205 286 311 345 308 218 ] [261 305 312 246 52 116 120 56 300 99 251 5 91 240 47 68 33 352 119 357 278 188 198 209 111 135 241 321 12 192 248 104 372 75 149 325 375 277 80 332 73 64 106 77 255 16 154 281 257 199 71 306 ] [58 187 359 150 50 32 178 76 102 115 36 107 186 234 176 39 296 370 48 182 138 263 307 285 377 283 334 51 63 132 103 316 158 275 27 141 338 264 271 201 191 221 ] [353 57 83 336 354 331 297 320 384 228 327 309 161 301 172 134 121 203 55 181 4 3 289 206 361 110 270 100 146 310 230 ] [229 34 253 200 173 29 233 179 169 128 313 160 166 165 13 366 88 92 122 223 6 152 380 20 85 195 279 70 81 274 ] [237 294 290 260 84 101 65 144 232 304 208 180 276 2 31 10 365 82 236 358 66 227 189 155 383 67 171 381 ] [267 210 153 376 49 317 288 163 28 130 194 46 259 341 284 139 126 243 362 17 118 42 303 324 214 168 ] [151 291 8 124 367 378 213 328 164 62 44 204 335 250 269 262 ] [339 265 314 252 249 1 145 170 90 212 54 ] [113 9 299 344 37 ] [190 373 196 26 ] [215 348 ]

// [346 ] [162 59 ] [148 18 323 131 ] [174 72 30 337 322 86 351 45 ] [287 340 238 25 242 185 69 302 117 330 222 22 41 371 97 177 ] [247 273 369 184 114 254 349 147 38 167 326 43 112 125 211 282 256 79 329 35 156 239 23 127 19 ] [350 197 53 219 175 347 60 355 140 11 40 333 98 318 21 266 193 159 298 93 280 244 183 207 15 231 14 295 245 272 292 94 374 363 95 319 24 ] [225 220 202 379 7 143 342 258 74 87 123 61 343 136 137 364 89 315 235 217 226 268 224 382 133 293 129 216 109 360 78 157 108 142 96 105 356 368 205 286 311 345 308 218 261 305 312 246 52 116 120 56 300 99 251 5 91 240 47 68 33 352 119 357 278 188 198 209 111 135 241 321 12 192 248 104 372 75 149 325 375 277 80 332 73 64 106 77 255 16 154 281 257 199 71 306 58 187 359 150 50 32 178 76 102 115 36 107 186 234 176 39 296 370 48 182 138 263 307 285 377 283 334 51 63 132 103 316 158 275 27 141 338 264 271 201 191 221 353 57 83 336 354 331 297 320 384 228 327 309 161 301 172 134 121 203 55 181 4 3 289 206 361 110 270 100 146 310 230 229 34 253 200 173 29 233 179 169 128 313 160 166 165 13 366 88 92 122 223 6 152 380 20 85 195 279 70 81 274 237 294 290 260 84 101 65 144 232 304 208 180 276 2 31 10 365 82 236 358 66 227 189 155 383 67 171 381 267 210 153 376 49 317 288 163 28 130 194 46 259 341 284 139 126 243 362 17 118 42 303 324 214 168 151 291 8 124 367 378 213 328 164 62 44 204 335 250 269 262 339 265 314 252 249 1 145 170 90 212 54 113 9 299 344 37 190 373 196 26 215 348 ]

// 769 346 162 59 148 18 323 131 174 72 30 337 322 86 351 45 287 340 238 25 242 185 69 302 117 330 222 22 41 371 97 177 247 273 369 -1 184 114 254 349 147 -1 -1 38 167 326 43 112 -1 -1 125 211 282 -1 -1 256 79 329 35 156 239 23 127 19 350 197 53 -1 219 175 -1 347 60 355 140 11 40 333 98 318 21 266 193 159 -1 298 93 280 244 183 -1 -1 -1 -1 -1 207 15 -1 231 14 295 245 272 -1 292 94 -1 374 363 95 319 -1 24 -1 225 220 202 379 -1 -1 -1 -1 7 -1 143 342 -1 -1 258 -1 -1 -1 74 87 -1 -1 -1 -1 123 -1 61 343 136 -1 -1 -1 137 -1 364 89 315 235 217 226 268 224 382 133 -1 -1 293 -1 -1 -1 129 216 109 360 78 157 108 -1 142 96 105 356 368 205 286 311 345 308 218 -1 -1 -1 -1 -1 -1 261 305 -1 -1 312 -1 -1 -1 246 -1 52 -1 -1 -1 -1 -1 -1 -1 116 -1 -1 -1 -1 -1 120 56 300 99 -1 251 -1 5 91 -1 -1 240 47 68 33 352 119 357 278 188 198 -1 -1 209 111 -1 135 -1 -1 -1 241 321 12 -1 192 248 104 372 75 149 325 375 277 80 332 73 64 -1 -1 106 77 -1 255 16 154 -1 281 -1 257 199 -1 71 306 -1 -1 -1 -1 -1 -1 -1 -1 -1 58 -1 187 -1 -1 359 -1 -1 -1 -1 -1 -1 150 -1 -1 -1 -1 -1 50 32 -1 -1 -1 -1 178 76 102 115 36 107 186 -1 234 176 -1 -1 -1 39 296 -1 370 -1 -1 -1 -1 48 182 138 263 -1 -1 -1 -1 -1 -1 -1 307 285 377 283 334 51 63 132 103 316 158 -1 275 -1 -1 -1 -1 -1 -1 27 141 338 264 -1 -1 -1 -1 271 -1 -1 -1 -1 -1 -1 -1 201 191 -1 221 -1 -1 -1 -1 -1 353 -1 -1 57 -1 83 -1 336 354 331 -1 297 320 -1 384 -1 -1 228 327 309 161 -1 -1 -1 -1 -1 -1 -1 301 -1 -1 -1 -1 -1 172 134 -1 -1 121 -1 -1 -1 -1 -1 -1 -1 -1 -1 203 -1 -1 -1 -1 -1 -1 55 181 -1 -1 4 -1 -1 3 289 206 -1 361 110 270 -1 -1 100 146 -1 310 -1 230 -1 -1 -1 -1 -1 -1 -1 229 -1 34 253 200 -1 -1 173 -1 29 233 -1 -1 179 169 128 313 160 166 165 13 366 -1 -1 -1 -1 -1 -1 -1 -1 -1 88 -1 92 122 -1 -1 -1 -1 223 6 152 380 20 85 195 279 70 81 -1 -1 274 -1 -1 -1 -1 -1 -1 -1 -1 237 -1 294 -1 290 -1 260 -1 -1 84 -1 101 65 144 -1 232 304 208 180 -1 -1 -1 -1 -1 -1 276 -1 -1 -1 2 -1 -1 -1 31 -1 -1 -1 -1 -1 10 365 -1 82 236 358 66 227 -1 189 155 383 -1 -1 67 171 381 -1 -1 -1 267 -1 -1 -1 -1 210 -1 -1 -1 -1 -1 153 376 -1 49 317 288 163 28 130 194 46 -1 259 -1 -1 341 -1 -1 -1 284 -1 -1 -1 139 126 243 -1 362 17 118 42 -1 -1 303 324 214 168 -1 -1 -1 -1 -1 -1 151 291 -1 -1 -1 -1 -1 -1 -1 -1 -1 8 124 -1 -1 367 -1 378 -1 -1 -1 -1 213 328 -1 -1 -1 164 -1 62 -1 -1 44 204 335 250 -1 269 -1 -1 -1 -1 -1 -1 -1 -1 262 -1 -1 -1 -1 -1 -1 -1 -1 -1 339 265 314 252 -1 -1 249 -1 -1 1 -1 -1 145 170 -1 -1 -1 -1 90 212 -1 -1 54 -1 -1 -1 -1 -1 -1 -1 113 9 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 299 -1 344 37 -1 -1 -1 -1 190 -1 373 -1 -1 -1 196 -1 -1 26 -1 -1 -1 -1 -1 215 -1 348 -1 -1 -1 -1
